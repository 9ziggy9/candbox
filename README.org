* Notes on Low-Level Programming for High-Level Engineers AKA C :TOC_4:
  - [[#disclaimer][DISCLAIMER]]
  - [[#preliminaries][Preliminaries]]
    - [[#wtf-do-i-need-to-install][WTF do I need to install?]]
      - [[#linux][Linux]]
      - [[#macos][macOS]]
      - [[#bsd][BSD]]
      - [[#windows][Windows]]
  - [[#references][References]]
    - [[#beejs-guide-to-c-programming][Beej's Guide to C Programming]]
    - [[#beejs-other-guides][Beej's other guides]]
    - [[#kr-c][K&R C]]

** DISCLAIMER
#+BEGIN_QUOTE
*DISCLAIMER*:\\

The following is a set of notes on low-level system
programming targetting programmers more accustomed
to the higher-level world of interpreted languages.\\

I am *NOT* an expert in C programming and I can barely
follow any assembler language that is not nasm. This
document may contain many incorrect statements but I
bet you that your GPT4 won't say "mother fucker" in an
introduction, mother fucker.\\

Each day we've worked on this repo will be separated into
branches, if you want to follow sequentially as this repo
has evolved, select the branch by day (day-one) being the
branch corresponding to the state of the repo at the time
of writing this message.\\

Have fun and please feel free to absolutely roast me for
any and all statements.\\
#+HTML: <img src="./media/expert.gif" alt="lawyerings" />
#+END_QUOTE

** Preliminaries
We are not going to talk C at all until we cover some basic
UNIX OS concepts and discuss build tools. Even if you don't
care about C, this stuff might be useful.
*** WTF do I need to install?
You need a standard compiler and /make/.\\

You have either /gcc/ or /clang/ pre-installed on UNIX-like OSs,
so the only thing you will need is /make/.\\

**** Linux
  If it isn't installed by default then consult your distro's
  package docs. This should return something if it's installed: \\
#+BEGIN_SRC console
which make
#+END_SRC

**** macOS
#+BEGIN_SRC console
brew install make
#+END_SRC

**** BSD
As with Linux, this is going to depend on your BSD flavor
but obviously if you are using BSD you probably shouldn't
be reading this. If you use FreeBSD and you are somehow
unaware, core /make/ in FreeBSD (i.e. what you use for ports)
is not the same thing as the commie GNU /make/
that most people are familiar with. You would need to install
[[https://www.freshports.org/devel/gmake/][gmake]] to be perfectly
consistent with these notes but who cares?
**** Windows
  The best starting place is to [[https://upload.wikimedia.org/wikipedia/commons/2/28/Richard_Stallman_at_LibrePlanet_2019.jpg][install gentoo]]
  first.\\

  Okay fine, then you should probably use [[WSL][WSL]] because
  literally nobody but game devs have the sanity or motivation
  necessary to learn C using Windows APIs.\\

  If you ARE using WSL, you are most likely using Ubuntu:
  #+BEGIN_SRC console
  sudo apt-install make
  #+END_SRC
  There is also [[https://www.cygwin.com/install.html][cygwin]] but I haven't
  the slightest idea how that works, so good luck.
** References
There is an infinite supply of C programming resources
and I'll note a few here in order of what I feel is the
most helpful.\\
*** [[https://beej.us/guide/bgc/html/][Beej's Guide to C Programming]]
[[https://beej.us/guide/bgnet/html][Beej's Guide to Network Programming]]
is super famous but
this one is just as incredible in my opinion. I wish I had
been aware of thes guides' existence when I first started
writing C. Beej's writing style is incredibly easy to parse
and he has an incredible sense of what students of the C
language tend to struggle with. This guide can be read cover
to cover without any boredom or dullness arising.
*** [[https://beej.us/guide/][Beej's other guides]]
As I mentioned before, Beej's most famous guide is the
Network Programming one but I might as well link his page.
My dude has a way of explaing the things.

*** K&R C
Obviously...
